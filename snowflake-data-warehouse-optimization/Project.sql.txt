 ==========================================
 Snowflake Mini Project SQL Script
 Project: Sales Data Pipeline & Optimization
 ==========================================

 1. Create a Warehouse
CREATE WAREHOUSE IF NOT EXISTS my_warehouse
WITH WAREHOUSE_SIZE = 'XSMALL'
AUTO_SUSPEND = 300
AUTO_RESUME = TRUE;

 2. Create a Database
CREATE DATABASE IF NOT EXISTS my_snowflake_db;

 3. Use the Database
USE DATABASE my_snowflake_db;

 4. Create a Schema
CREATE SCHEMA IF NOT EXISTS sales_schema;

 5. Create a Table
CREATE TABLE IF NOT EXISTS sales_schema.orders (
    order_id INT,
    customer_id INT,
    order_date DATE,
    product_id INT,
    quantity INT,
    price NUMBER(10,2)
);

 6. Insert Sample Data
 Using GENERATOR function to simulate 1000 rows
INSERT INTO sales_schema.orders
SELECT 
    SEQ4() + 1 AS order_id,
    UNIFORM(100, 110, RANDOM()) AS customer_id,
    DATEADD(day, UNIFORM(0, 365, RANDOM()), '2025-01-01') AS order_date,
    UNIFORM(1000, 1010, RANDOM()) AS product_id,
    UNIFORM(1, 10, RANDOM()) AS quantity,
    UNIFORM(100, 1000, RANDOM()) AS price
FROM TABLE(GENERATOR(ROWCOUNT => 1000));

 7. Create a Clustered Table for Performance Optimization
CREATE TABLE IF NOT EXISTS sales_schema.orders_clustered
CLUSTER BY (customer_id)
AS
SELECT * FROM sales_schema.orders;

 8. Create a Materialized View for Fast Aggregation
CREATE MATERIALIZED VIEW IF NOT EXISTS sales_schema.orders_summary_mv AS
SELECT 
    customer_id, 
    SUM(quantity) AS total_quantity, 
    SUM(price) AS total_price
FROM sales_schema.orders_clustered
GROUP BY customer_id;

 9. Query to Test Materialized View
SELECT * FROM sales_schema.orders_summary_mv
ORDER BY total_price DESC;

 10. Check Clustering Information
SELECT SYSTEM$CLUSTERING_INFORMATION('sales_schema.orders_clustered');
